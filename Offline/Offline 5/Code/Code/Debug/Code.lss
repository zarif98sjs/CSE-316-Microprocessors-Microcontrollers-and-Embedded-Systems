
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000001f8  0000028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000714  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ea  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000305  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000200  00000000  00000000  00001708  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  8a:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:

int mode_type = 0;

/*Interrupt Service Routine for INT0*/
ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	mode_type ^= 1;		/* Toggle PORTC */
  a2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
  a6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	82 27       	eor	r24, r18
  ae:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
  b2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	83 ed       	ldi	r24, 0xD3	; 211
  b8:	90 e3       	ldi	r25, 0x30	; 48
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <__vector_1+0x28>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <__vector_1+0x2e>
  c0:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
	
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <main>:

int main(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	28 97       	sbiw	r28, 0x08	; 8
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	
	DDRA = 0xFF;
  e6:	8f ef       	ldi	r24, 0xFF	; 255
  e8:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  ea:	87 bb       	out	0x17, r24	; 23
	DDRD = 0;	// input	
  ec:	11 ba       	out	0x11, r1	; 17
	
	unsigned char col[] = {0b00000000,0b11111011,0b11111011,0b11011011,0b11011011,0b11011111,0b11011111,0b00000000};
  ee:	88 e0       	ldi	r24, 0x08	; 8
  f0:	e0 e6       	ldi	r30, 0x60	; 96
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	de 01       	movw	r26, r28
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	01 90       	ld	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	8a 95       	dec	r24
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x26>
		
	int nc = 8;
	int k = 0;
	
	GICR = 1<<INT0;		/* Enable INT0*/
 100:	80 e4       	ldi	r24, 0x40	; 64
 102:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 1<<ISC01 ;  /* Trigger INT0 on falling edge */
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	85 bf       	out	0x35, r24	; 53
	sei();	
 108:	78 94       	sei
	DDRD = 0;	// input	
	
	unsigned char col[] = {0b00000000,0b11111011,0b11111011,0b11011011,0b11011011,0b11011111,0b11011111,0b00000000};
		
	int nc = 8;
	int k = 0;
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
	sei();	
	
    while (1) 
    {
		
		if(mode_type==0)
 10e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 112:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 116:	89 2b       	or	r24, r25
 118:	51 f1       	breq	.+84     	; 0x16e <main+0x9c>
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	59 c0       	rjmp	.+178    	; 0x1d2 <main+0x100>
		{
			// stable
			for(int i=0;i<nc;i++){
						
				PORTA = (1<<((i-k+nc)%nc));
 120:	c9 01       	movw	r24, r18
 122:	84 1b       	sub	r24, r20
 124:	95 0b       	sbc	r25, r21
 126:	08 96       	adiw	r24, 0x08	; 8
 128:	87 70       	andi	r24, 0x07	; 7
 12a:	90 78       	andi	r25, 0x80	; 128
 12c:	99 23       	and	r25, r25
 12e:	24 f4       	brge	.+8      	; 0x138 <main+0x66>
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	88 6f       	ori	r24, 0xF8	; 248
 134:	9f 6f       	ori	r25, 0xFF	; 255
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	db 01       	movw	r26, r22
 13e:	02 c0       	rjmp	.+4      	; 0x144 <main+0x72>
 140:	aa 0f       	add	r26, r26
 142:	bb 1f       	adc	r27, r27
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <main+0x6e>
 148:	ab bb       	out	0x1b, r26	; 27
				PORTB  = ~col[i];
 14a:	e1 e0       	ldi	r30, 0x01	; 1
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	ec 0f       	add	r30, r28
 150:	fd 1f       	adc	r31, r29
 152:	e2 0f       	add	r30, r18
 154:	f3 1f       	adc	r31, r19
 156:	80 81       	ld	r24, Z
 158:	80 95       	com	r24
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	e1 ee       	ldi	r30, 0xE1	; 225
 15e:	f4 e0       	ldi	r31, 0x04	; 4
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <main+0x8e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x94>
 166:	00 00       	nop
    {
		
		if(mode_type==0)
		{
			// stable
			for(int i=0;i<nc;i++){
 168:	2f 5f       	subi	r18, 0xFF	; 255
 16a:	3f 4f       	sbci	r19, 0xFF	; 255
 16c:	02 c0       	rjmp	.+4      	; 0x172 <main+0xa0>
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	28 30       	cpi	r18, 0x08	; 8
 174:	31 05       	cpc	r19, r1
 176:	a4 f2       	brlt	.-88     	; 0x120 <main+0x4e>
 178:	ca cf       	rjmp	.-108    	; 0x10e <main+0x3c>
					
			for(int count = 0; count<10; count++)
			{
				for(int i=0;i<nc;i++){
							
					PORTA = (1<<((i-k+nc)%nc));
 17a:	c9 01       	movw	r24, r18
 17c:	84 1b       	sub	r24, r20
 17e:	95 0b       	sbc	r25, r21
 180:	08 96       	adiw	r24, 0x08	; 8
 182:	87 70       	andi	r24, 0x07	; 7
 184:	90 78       	andi	r25, 0x80	; 128
 186:	99 23       	and	r25, r25
 188:	24 f4       	brge	.+8      	; 0x192 <main+0xc0>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	88 6f       	ori	r24, 0xF8	; 248
 18e:	9f 6f       	ori	r25, 0xFF	; 255
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	e1 e0       	ldi	r30, 0x01	; 1
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	df 01       	movw	r26, r30
 198:	02 c0       	rjmp	.+4      	; 0x19e <main+0xcc>
 19a:	aa 0f       	add	r26, r26
 19c:	bb 1f       	adc	r27, r27
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <main+0xc8>
 1a2:	ab bb       	out	0x1b, r26	; 27
					PORTB  = ~col[i];
 1a4:	ec 0f       	add	r30, r28
 1a6:	fd 1f       	adc	r31, r29
 1a8:	e2 0f       	add	r30, r18
 1aa:	f3 1f       	adc	r31, r19
 1ac:	80 81       	ld	r24, Z
 1ae:	80 95       	com	r24
 1b0:	88 bb       	out	0x18, r24	; 24
 1b2:	e1 ee       	ldi	r30, 0xE1	; 225
 1b4:	f4 e0       	ldi	r31, 0x04	; 4
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0xe4>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0xea>
 1bc:	00 00       	nop
		{
			// rotate
					
			for(int count = 0; count<10; count++)
			{
				for(int i=0;i<nc;i++){
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <main+0xf6>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	28 30       	cpi	r18, 0x08	; 8
 1ca:	31 05       	cpc	r19, r1
 1cc:	b4 f2       	brlt	.-84     	; 0x17a <main+0xa8>
		}
		else
		{
			// rotate
					
			for(int count = 0; count<10; count++)
 1ce:	6f 5f       	subi	r22, 0xFF	; 255
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	6a 30       	cpi	r22, 0x0A	; 10
 1d4:	71 05       	cpc	r23, r1
 1d6:	b4 f3       	brlt	.-20     	; 0x1c4 <main+0xf2>
					PORTB  = ~col[i];
					_delay_ms(5);
				}
			}
					
			k = (k+1)%nc;
 1d8:	4f 5f       	subi	r20, 0xFF	; 255
 1da:	5f 4f       	sbci	r21, 0xFF	; 255
 1dc:	47 70       	andi	r20, 0x07	; 7
 1de:	50 78       	andi	r21, 0x80	; 128
 1e0:	55 23       	and	r21, r21
 1e2:	0c f0       	brlt	.+2      	; 0x1e6 <main+0x114>
 1e4:	94 cf       	rjmp	.-216    	; 0x10e <main+0x3c>
 1e6:	41 50       	subi	r20, 0x01	; 1
 1e8:	51 09       	sbc	r21, r1
 1ea:	48 6f       	ori	r20, 0xF8	; 248
 1ec:	5f 6f       	ori	r21, 0xFF	; 255
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	8d cf       	rjmp	.-230    	; 0x10e <main+0x3c>

000001f4 <_exit>:
 1f4:	f8 94       	cli

000001f6 <__stop_program>:
 1f6:	ff cf       	rjmp	.-2      	; 0x1f6 <__stop_program>
